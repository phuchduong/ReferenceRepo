#You must run powershell in administrative mode.
#You must first enable scripts on your machine. Using: Set-ExecutionPolicy RemoteSigned
#Establish a connection to azure itself using: Add-AzureAccount to setup an instance based 12 session.

#Get the subscription file by calling: Get-AzurePublishSettingsFile
$subscriptionSettingsFile = "C:\Users\PhucHDuong\Documents\Data Mining\HDInsight Map Reduce Example\BizSpark.publishsettings"

#Logging into your subscription
Import-AzurePublishSettingsFile $subscriptionSettingsFile
Get-AzureSubscription
Select-AzureSubscription -SubscriptionName "BizSpark"

$statusFolder = "/tutorials/usepig/status"
$clusterName = "dojosamplehadoopcluster"

# Create the Pig job definition. Load and view the log file.
$QueryString =  ""

$pigJobDefinition = New-AzureHDInsightPigJobDefinition -Query $QueryString -StatusFolder $statusFolder
# Submit the Pig job
Write-Host "Submit the Pig job ..." -ForegroundColor Green
$pigJob = Start-AzureHDInsightJob -Cluster $clusterName -JobDefinition $pigJobDefinition  
# Wait for the Pig job to complete
Write-Host "Wait for the Pig job to complete ..." -ForegroundColor Green
Wait-AzureHDInsightJob -Job $pigJob -WaitTimeoutInSeconds 3600
# Print the standard error and the standard output of the Pig job.
Write-Host "Display the standard output ..." -ForegroundColor Green
Get-AzureHDInsightJobOutput -Cluster $clusterName -JobId $pigJob.JobId -StandardOutput

########### Load and dump logs. ###########
	#DON'T DO THIS IN PRACTICE WITH BIG DATA
$QueryString =  "LOGS = LOAD 'wasb:///example/data/sample.log';" +
				"DUMP LOGS;"

########### Count the number of rows in the data. ###########
$QueryString =  "LOGS = LOAD 'wasb:///example/data/sample.log';" +
				"DUMP LOGS;"

########### Summarize a count for each type of log report. ###########
$0 = '$0';
$QueryString =  "LOGS = LOAD 'wasb:///example/data/sample.log';" +
                "LEVELS = foreach LOGS generate REGEX_EXTRACT($0, '(TRACE|DEBUG|INFO|WARN|ERROR|FATAL)', 1)  as LOGLEVEL;" +
                "FILTEREDLEVELS = FILTER LEVELS by LOGLEVEL is not null;" +
                "GROUPEDLEVELS = GROUP FILTEREDLEVELS by LOGLEVEL;" +
                "FREQUENCIES = foreach GROUPEDLEVELS generate group as LOGLEVEL, COUNT(FILTEREDLEVELS.LOGLEVEL) as COUNT;" +
                "RESULT = order FREQUENCIES by COUNT desc;" +
                "DUMP LOGS;" 
                #REGEX_EXTRACT
                #http://pig.apache.org/docs/r0.9.1/api/org/apache/pig/builtin/REGEX_EXTRACT.html

#Pig data types & schema types.
#https://pig.apache.org/docs/r0.7.0/piglatin_ref2.html#Data+Types

# Load iris dataset.
$QueryString =  "irisData = LOAD 'wasb:///iris.csv';" + 
				"dump irisData;"

# load iris dataset with specified delimiter, and schema
$QueryString =  "irisData = LOAD 'wasb:///iris.csv' USING PigStorage(',') as (sepLen:double, sepWid:double, petLen:double, petWid:double, species:chararray);" +
				"dump irisData;"

# group iris data by species.				
$QueryString =  "irisData = LOAD 'wasb:///iris.csv' USING PigStorage(',') as (sepLen:double, sepWid:double, petLen:double, petWid:double, species:chararray);" +
                "bySpecies = GROUP irisData by species" + 
                "DUMP bySpecies;" 

# Count iris data by species but without the species name.
$QueryString =  "irisData = LOAD 'wasb:///iris.csv' USING PigStorage(',') as (sepLen:double, sepWid:double, petLen:double, petWid:double, species:chararray);" +
                "bySpecies = GROUP irisData by species;" +
                "speciesCount = FOREACH bySpecies GENERATE COUNT (irisData.species);" +
                "DUMP speciesCount;" 

# Count iris data by specise with species names.
$QueryString =  "irisData = LOAD 'wasb:///iris.csv' USING PigStorage(',') as (sepLen:double, sepWid:double, petLen:double, petWid:double, species:chararray);" +
                "GROUPEDLEVELS = GROUP irisData by species;" +
                "FREQUENCIES = foreach GROUPEDLEVELS generate group as species, COUNT(irisData.species) as COUNT;" +
                "RESULT = order FREQUENCIES by COUNT desc;" +
                "DUMP RESULT;"

# Load titanic  dataset
$QueryString =  "titanic = LOAD 'wasb:///titanic.csv';"+
                "DUMP titanic;"